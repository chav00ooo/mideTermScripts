import socket
import nmap
import csv
import json
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import os

# Configuration
TARGETS = ["127.0.0.1", "scanme.nmap.org"]  # List of targets to scan
PORT_RANGE = range(0, 1025)  # Range of ports to scan (0-1025 for all common ports)

def scan_port(ip, port):
    """
    Checks if a port on a given IP is open.
    """
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(0.5)  # Reduced timeout for quicker scans
            if s.connect_ex((ip, port)) == 0:
                print(f"[{datetime.now()}] Port {port} is open on {ip}")
                return port
    except Exception:
        pass
    return None

def scan_ports(ip, ports):
    """
    Scans multiple ports on a target IP.
    """
    open_ports = []
    with ThreadPoolExecutor(max_workers=10) as executor:
        results = executor.map(lambda port: scan_port(ip, port), ports)
        open_ports = [port for port in results if port]
    return open_ports

def detect_services(ip, ports):
    """
    Uses Nmap to detect services running on open ports.
    """
    nm = nmap.PortScanner()
    results = {}
    for port in ports:
        print(f"[{datetime.now()}] Detecting service on port {port}...")
        nm.scan(ip, str(port), arguments='-sV --host-timeout 10s')  # Timeout for Nmap
        try:
            service = nm[ip]['tcp'][port]['name']
            version = nm[ip]['tcp'][port].get('version', 'Unknown')
            results[port] = {"service": service, "version": version}
        except KeyError:
            results[port] = {"service": "Unknown", "version": "Unknown"}
    return results

def match_vulnerabilities(port, service):
    """
    Matches open ports and services to known vulnerabilities.
    """
    db_path = os.path.join(os.path.dirname(__file__), "vulnerability_db.json")
    try:
        with open(db_path, "r", encoding="utf-8") as file:
            vuln_db = json.load(file)
        vulnerabilities = vuln_db.get(str(port), [])
        vulnerabilities += vuln_db.get(service, [])
        return vulnerabilities
    except FileNotFoundError:
        print(f"[{datetime.now()}] Error: Vulnerability database not found at {db_path}")
        return []
    except json.JSONDecodeError:
        print(f"[{datetime.now()}] Error: Vulnerability database is not in valid JSON format.")
        return []

def save_results_to_csv(results, filename="vulnerability_report.csv"):
    """
    Saves scan results to a CSV file.
    """
    with open(filename, mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["Target", "Port", "Service", "Version", "Vulnerabilities"])
        for result in results:
            writer.writerow([
                result["target"],
                result["port"],
                result["service"],
                result["version"],
                ", ".join(result["vulnerabilities"])
            ])

# Main Script
if __name__ == "__main__":
    print(f"[{datetime.now()}] Starting vulnerability scan")
    all_results = []

    for target in TARGETS:
        print(f"\n[{datetime.now()}] Scanning target: {target}")
        
        # Step 1: Port Scanning
        open_ports = scan_ports(target, PORT_RANGE)
        print(f"[{datetime.now()}] Open ports on {target}: {open_ports}")
        
        # Step 2: Service Detection
        services = detect_services(target, open_ports)
        for port, details in services.items():
            print(f"[{datetime.now()}] Port {port}: Service - {details['service']}, Version - {details['version']}")
        
        # Step 3: Vulnerability Matching
        for port, details in services.items():
            vulnerabilities = match_vulnerabilities(port, details["service"])
            all_results.append({
                "target": target,
                "port": port,
                "service": details["service"],
                "version": details["version"],
                "vulnerabilities": vulnerabilities
            })

    # Save all results to CSV
    save_results_to_csv(all_results)
    print(f"[{datetime.now()}] Scan complete. Results saved to 'vulnerability_report.csv'.")
