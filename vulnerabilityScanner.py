import socket
import nmap
import csv
import json
from concurrent.futures import ThreadPoolExecutor

# Configuration
TARGET = "127.0.0.1"  # Localhost
PORT_RANGE = range(20, 1025)  # Ports to scan

# Functions
def scan_port(ip, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            if s.connect_ex((ip, port)) == 0:
                return port
    except Exception:
        pass
    return None

def scan_ports(ip, ports):
    open_ports = []
    with ThreadPoolExecutor(max_workers=10) as executor:
        results = executor.map(lambda port: scan_port(ip, port), ports)
        open_ports = [port for port in results if port]
    return open_ports

def detect_services(ip, ports):
    nm = nmap.PortScanner()
    results = {}
    for port in ports:
        nm.scan(ip, str(port), arguments='-sV')
        try:
            service = nm[ip]['tcp'][port]['name']
            version = nm[ip]['tcp'][port].get('version', 'Unknown')
            results[port] = {"service": service, "version": version}
        except KeyError:
            results[port] = {"service": "Unknown", "version": "Unknown"}
    return results

def match_vulnerabilities(port, service):
    with open("vulnerability_db.json") as file:
        vuln_db = json.load(file)
    vulnerabilities = vuln_db.get(str(port), [])
    vulnerabilities += vuln_db.get(service, [])
    return vulnerabilities

def save_results_to_csv(results, filename="vulnerability_report.csv"):
    with open(filename, mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["Port", "Service", "Version", "Vulnerabilities"])
        for result in results:
            writer.writerow([result["port"], result["service"], result["version"], ", ".join(result["vulnerabilities"])])

# Main Script
if __name__ == "__main__":
    print(f"Starting vulnerability scan on {TARGET}")
    
    # Step 1: Port Scanning
    open_ports = scan_ports(TARGET, PORT_RANGE)
    print(f"Open ports on {TARGET}: {open_ports}")
    
    # Step 2: Service Detection
    services = detect_services(TARGET, open_ports)
    for port, details in services.items():
        print(f"Port {port}: Service - {details['service']}, Version - {details['version']}")
    
    # Step 3: Vulnerability Matching and Report Generation
    results = []
    for port, details in services.items():
        vulnerabilities = match_vulnerabilities(port, details["service"])
        results.append({
            "port": port,
            "service": details["service"],bsh
            "version": details["version"],
            "vulnerabilities": vulnerabilities
        })
    
    save_results_to_csv(results)
    print("Scan complete. Results saved to 'vulnerability_report.csv'.")
